// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetTasksData, GetTasksError, GetTasksResponse, CreateTaskData, CreateTaskError, CreateTaskResponse, GetTaskByStatusData, GetTaskByStatusError, GetTaskByStatusResponse, GetTaskData, GetTaskError, GetTaskResponse, DeleteTaskData, DeleteTaskError, DeleteTaskResponse, UpdateTaskData, UpdateTaskError, UpdateTaskResponse, GetCategoriesData, GetCategoriesError, GetCategoriesResponse, CreateCategoryData, CreateCategoryError, CreateCategoryResponse, GetCategoryData, GetCategoryError, GetCategoryResponse, DeleteCategoryData, DeleteCategoryError, DeleteCategoryResponse, UpdateCategoryData, UpdateCategoryError, UpdateCategoryResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Read Tasks
 */
export const getTasks = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetTasksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTasksResponse, GetTasksError, ThrowOnError>({
        ...options,
        url: '/tasks'
    });
};

/**
 * Create Task
 */
export const createTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateTaskData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTaskResponse, CreateTaskError, ThrowOnError>({
        ...options,
        url: '/tasks'
    });
};

/**
 * Get Task By Status
 */
export const getTaskByStatus = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTaskByStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaskByStatusResponse, GetTaskByStatusError, ThrowOnError>({
        ...options,
        url: '/tasks/by-status/{status}'
    });
};

/**
 * Get Task
 */
export const getTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTaskData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaskResponse, GetTaskError, ThrowOnError>({
        ...options,
        url: '/tasks/{task_id}'
    });
};

/**
 * Delete Task
 */
export const deleteTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteTaskData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTaskResponse, DeleteTaskError, ThrowOnError>({
        ...options,
        url: '/tasks/{task_id}'
    });
};

/**
 * Update Task
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateTaskData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateTaskResponse, UpdateTaskError, ThrowOnError>({
        ...options,
        url: '/tasks/{task_id}'
    });
};

/**
 * Read Categories
 */
export const getCategories = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoriesResponse, GetCategoriesError, ThrowOnError>({
        ...options,
        url: '/categories'
    });
};

/**
 * Create Category
 */
export const createCategory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateCategoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCategoryResponse, CreateCategoryError, ThrowOnError>({
        ...options,
        url: '/categories'
    });
};

/**
 * Get Category
 */
export const getCategory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetCategoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoryResponse, GetCategoryError, ThrowOnError>({
        ...options,
        url: '/categories/{category_id}'
    });
};

/**
 * Delete Category
 */
export const deleteCategory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteCategoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCategoryResponse, DeleteCategoryError, ThrowOnError>({
        ...options,
        url: '/categories/{category_id}'
    });
};

/**
 * Update Category
 */
export const updateCategory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateCategoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateCategoryResponse, UpdateCategoryError, ThrowOnError>({
        ...options,
        url: '/categories/{category_id}'
    });
};